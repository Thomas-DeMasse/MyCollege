get_sum:
.LFB0:

        pushq   %rbp               #Pushes %rbp to top of stack
        movq    %rsp, %rbp         #Moves %rsp to top of stack
        movq    %rdi, -24(%rbp)    #-24(%rbp) = X[]
        movl    %esi, -28(%rbp)    #-28(%rbp) = n
        movl    $0, -4(%rbp)        # int sum = 0;
        movl    $0, -8(%rbp)        # int i = 0;
        jmp     .L2                 # goto .L2
.L3:
        movl    -8(%rbp), %eax     #%eax = 0;
        cltq
        leaq    0(,%rax,4), %rdx   #sum = %eax + X[i}
        movq    -24(%rbp), %rax    #store in %rax
        addq    %rdx, %rax         #perform computatation
        movl    (%rax), %eax       #store result in %eax
        addl    %eax, -4(%rbp)
        addl    $1, -8(%rbp)       #increment i++
.L2:
        movl    -8(%rbp), %eax     #while(i<n)
        cmpl    -28(%rbp), %eax
        jl      .L3                #goto .L3
        movl    -4(%rbp), %eax
        popq    %rbp
        ret


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





switch_eg:
.LFB0:

        pushq   %rbp               #pushes %rbp to top of stack
        movq    %rsp, %rbp          #points %rsp to %rbp
        movq    %rdi, -24(%rbp)     #-24(%rbp) = x
        movq    %rsi, -32(%rbp)     #-32(%rbp) = y
        movq    %rdx, -40(%rbp)     #-40(%rbp) = z
        movq    $1, -8(%rbp)        # w = 1
        cmpq    $6, -24(%rbp)       # if (x = 6)  
        ja      .L2                 #goto .L2
        movq    -24(%rbp), %rax     #%rax = x
        salq    $3, %rax	    #shift immediatley $3 and store in %rax	    
        addq    $.L4, %rax          
        movq    (%rax), %rax        
        jmp     *%rax
.L4:
        .quad   .L2
        .quad   .L7
        .quad   .L6
        .quad   .L5
        .quad   .L2
        .quad   .L3
        .quad   .L3
        .text
.L7:
        movq    -32(%rbp), %rax     #%rax = y
        imulq   -40(%rbp), %rax     #if 1 = x*z   
        movq    %rax, -8(%rbp)      #set value of w in %rax
        jmp     .L8                 #goto .L8
.L6:
        movq    -32(%rbp), %rax     #%rax = y
        cqto
        idivq   -40(%rbp)           #divide by z
        movq    %rax, -8(%rbp)      #set value of w in %rax
.L5:
        movq    -40(%rbp), %rax     #%rax = z;
        addq    %rax, -8(%rbp)      #add w += z; 
        jmp     .L8                 #goto .L8
.L3:
        movq    -40(%rbp), %rax     #%rax = z
        subq    %rax, -8(%rbp)      #w -=z

.L2:
        movq    $2, -8(%rbp)       #w = 2
.L8:
        movq    -8(%rbp), %rax     #set %rax = 1,
        popq    %rbp               #Return 
        ret


